package = io.github.treesitter.ktreesitter.internal
headers = tree_sitter/api.h alloc.h
headerFilter = tree_sitter/api.h
staticLibraries = libtree-sitter.a
staticLibraries.mingw = tree-sitter.lib
strictEnums = \
    TSLogType \
    TSQuantifier \
    TSQueryError \
    TSQueryPredicateStepType \
    TSWasmErrorKind
nonStrictEnums = \
    TSInputEncoding \
    TSSymbolType
excludedFunctions = \
    ts_language_is_wasm \
    ts_parser_set_wasm_store \
    ts_parser_take_wasm_store \
    ts_set_allocator \
    ts_wasm_store_delete \
    ts_wasm_store_language_count \
    ts_wasm_store_load_language \
    ts_wasm_store_new

---

static inline TSRange kts_node_range(TSNode node) {
    return (TSRange){
        .start_byte = ts_node_start_byte(node),
        .end_byte = ts_node_end_byte(node),
        .start_point = ts_node_start_point(node),
        .end_point = ts_node_end_point(node)
    };
}

static inline uintptr_t kts_node_id(TSNode node) {
    return (uintptr_t)node.id;
}

static inline int32_t kts_node_hash(TSNode node) {
    uintptr_t id = (uintptr_t)node.id;
    uintptr_t tree = (uintptr_t)node.tree;
    return (int32_t)(id == tree ? id : id ^ tree);
}

static inline void *kts_malloc(size_t size) {
    return ts_malloc(size);
}

static inline void kts_free(void *ptr) {
    return ts_free(ptr);
}
